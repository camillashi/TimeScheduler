/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.xemacscode.demo;

import org.xemacscode.demo.database.DBConnection;
import com.mysql.cj.jdbc.Blob;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import com.toedter.calendar.JCalendar;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author camil
 */
public class Calendar extends javax.swing.JFrame {
    
    /**
     * Creates new form Calendar
     */
    public Calendar() {
        initComponents();
        AppointmentPaneProvider.initAppointments(this, appointmentsPane);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnAddAppoint = new javax.swing.JButton();
        exportSchedule = new javax.swing.JButton();
        appointmentsPane = new javax.swing.JScrollPane();
        todayLabel = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(37, 116, 169));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Time Scheduler");

        btnAddAppoint.setText("+add Appointment");
        btnAddAppoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAppointActionPerformed(evt);
            }
        });

        exportSchedule.setText("Export Weekly Schedule");
        exportSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportScheduleActionPerformed(evt);
            }
        });

        todayLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        todayLabel.setForeground(new java.awt.Color(255, 255, 255));
        todayLabel.setText(LocalDate.now().format(DateTimeFormatter.ISO_DATE));

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(appointmentsPane))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(todayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(202, 202, 202)
                                .addComponent(btnAddAppoint, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(exportSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnAddAppoint)
                    .addComponent(exportSchedule))
                .addGap(1, 1, 1)
                .addComponent(todayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(appointmentsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        todayLabel.getAccessibleContext().setAccessibleName("todayLabel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportScheduleActionPerformed

        try ( FileWriter writer = new FileWriter("appointments.txt")) {
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            calendar.set(java.util.Calendar.DAY_OF_WEEK, calendar.getFirstDayOfWeek());
            LocalDate startOfWeek = LocalDate.ofInstant(calendar.getTime().toInstant(), ZoneId.systemDefault());
            LocalDate endOfWeek = startOfWeek.plusDays(7);
            Integer userId = UserProvider.getId();

            Connection dbconn = DBConnection.connectDB();
            final Date dateStartOfWeek = Date.valueOf(startOfWeek);
            final Date dateEndOfWeek = Date.valueOf(endOfWeek);

            PreparedStatement appointmentsBeginDateQuery = dbconn.prepareStatement("SELECT * FROM `appointments` WHERE ((`beginDate` > ? AND `beginDate` <= ?) OR (`endDate` > ? AND `endDate` <= ?)) AND `user_id` = ?");

            appointmentsBeginDateQuery.setDate(1, dateStartOfWeek);
            appointmentsBeginDateQuery.setDate(2, dateEndOfWeek);
            appointmentsBeginDateQuery.setDate(3, dateStartOfWeek);
            appointmentsBeginDateQuery.setDate(4, dateEndOfWeek);
            appointmentsBeginDateQuery.setInt(5, userId);
            ResultSet appointments = appointmentsBeginDateQuery.executeQuery();

            while (appointments.next()) {
                writer.write(String.format("Appointment: %s\n\n", appointments.getString("name")));
                writer.write(String.format("Start: %s %s\n",
                    appointments.getDate("beginDate").toLocalDate().format(DateTimeFormatter.ISO_DATE),
                    appointments.getTime("beginTime").toLocalTime().format(DateTimeFormatter.ISO_TIME)));
            writer.write(String.format("End: %s %s\n",
                appointments.getDate("endDate").toLocalDate().format(DateTimeFormatter.ISO_DATE),
                appointments.getTime("endTime").toLocalTime().format(DateTimeFormatter.ISO_TIME)));
        String location = appointments.getString("location");
        if (!location.isBlank()) {
            writer.write(String.format("Location: %s \n", location));
        }
        String participants = appointments.getString("participants");
        if (!participants.isBlank()) {
            writer.write(String.format("Participants: %s \n", participants));
        }
        writer.write(String.format("Priority: %s \n\n", appointments.getString("priority")));
        }
        writer.flush();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(Calendar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportScheduleActionPerformed

    private void btnAddAppointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAppointActionPerformed
        // TODO add your handling code here:
        Appointment appointment = new Appointment(); //open Appointment
        appointment.setLocationRelativeTo(null);
        appointment.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnAddAppointActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        Login login = new Login();
        login.setLocationRelativeTo(null);
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    public static void updateCalendar() throws SQLException {
        JCalendar calendar = new JCalendar();

        Connection dbconn = DBConnection.connectDB();
        Statement stmt = (Statement) dbconn.createStatement();
        ResultSet rs = stmt.executeQuery("Select * from users WHERE id='" + UserProvider.getId() + "'");

        while (rs.next()) {
            String name = rs.getString("name");
            Date begindate = rs.getDate("beginDate");
            Date enddate = rs.getDate("endDate");
            //Time begintime=rs.getTime("beginTime");
            //Time endtime=rs.getTime("endTime");
            String location = rs.getString("location");
            Blob file = (Blob) rs.getBlob("file");
            String reminder = rs.getString("reminder");
            String participants = rs.getString("participants");
            int userid = rs.getInt("user_id");

            ResultSetMetaData metadata = (ResultSetMetaData) rs.getMetaData();
            int columnCount = metadata.getColumnCount();
            Date str[] = new Date[columnCount];
            int a = 0;

            str[a++] = rs.getDate("beginDate");

            //Calendar cal = Calendar.getInstance();
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calendar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calendar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane appointmentsPane;
    private javax.swing.JButton btnAddAppoint;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton exportSchedule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel todayLabel;
    // End of variables declaration//GEN-END:variables
}
